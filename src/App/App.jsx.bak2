import React, { useState, useEffect } from 'react';
import { Routes, Route } from 'react-router-dom';
// import { initBooks } from '../constants';

import './App.css';

import Header from '../components/Header/Header.jsx';
import Footer from '../components/Footer/Footer.jsx';
import Aside from '../components/Aside/Aside.jsx';

import SignUpContent from '../pages/SignUpContent';
import LoginContent from '../pages/LoginContent';
import DashboardHomeContent from '../pages/DashboardHomeContent';
import LandingContent from '../pages/LandingContent';

import {
  signUpURI,
  loginURI,
  realDataFullURI,
  BooksManager,
} from '../constants';

import BooksService from '../services/backend';

// import axios from 'axios';
// import { sortBy } from 'lodash';

/* eslint-disable react/prop-types */

const App = () => {
  const [books, setBooks] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [asideVisibility, setAsideVisibility] = React.useState('hide');

  useEffect(() => {
    async function fetchData() {
      // fetch potential user data
      try {
        const res = await BooksService.getBooks(realDataFullURI);
        // successfull data fetch; status code in 2xx range
        BooksManager.initBooksManager(res.data.data);
        setBooks(res.data.data);
        setIsLoggedIn(true);
      } catch (err) {
        if (err.status == 401) {
          setIsLoggedIn(false);
        } else {
          console.log(`ERROR: ${err.toString()}`); // SCAFF
        }
      }
    }

    fetchData();

    setIsLoading(false);
  }, [isLoggedIn, isLoading]);

  /**
   * event handler for clicking on hamburger
   */
  const handleAsideClick = () => {
    if (asideVisibility === 'hide') {
      setAsideVisibility('show');
    } else {
      setAsideVisibility('hide');
    }
  };

  /**
   * perform actions on successful sign up
   */
  const handleAuthSuccess = (loggedIn) => {
    setIsLoggedIn(loggedIn);
  };

  return (
    <div className="App">
      <Header loggedIn={isLoggedIn} onAsideClick={handleAsideClick} />

      <main>
        {
          isLoading
          ?
          <p>Loading...</p>
          :
          <Routes>
            <Route path='/'>
              {
                isLoggedIn
                ?
                <Route
                  path='home'
                  element={
                    <DashboardHomeContent
                      BooksManager={BooksManager}
                      isLoading={isLoading}
                      isLoggedIn={isLoggedIn}
                    />
                  }
                />
                :
                <Route
                  index
                  element={
                    <LandingContent
                      isLoading={isLoading}
                    />
                  }
                />
              }
            </Route>

            <Route
              path={signUpURI}
              element={
                <SignUpContent
                  onSignUpSuccess={handleAuthSuccess}
                  isLoggedIn={isLoggedIn}
                  isLoading={isLoading}
                />
              }
            />

            <Route
              path={loginURI}
              element={
                <LoginContent
                  onLoginSuccess={handleAuthSuccess}
                  isLoggedIn={isLoggedIn}
                  isLoading={isLoading}
                />
              }
            />

            <Route path="*"
            />
          </Routes>
        }
      </main>

      <Aside books={books} onAsideClick={handleAsideClick} asideVisibility={asideVisibility} />

      <Footer />
    </div>
  );
};

export default App;
